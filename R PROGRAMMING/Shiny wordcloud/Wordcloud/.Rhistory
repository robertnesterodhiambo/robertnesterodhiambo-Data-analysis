install.packages("ggplt2")
install.packages("ggplot2")
librar(ggplot2)
library(ggplot2)
ggplot()
quit()
install.packages("rmarkdown")
library(rmarkdown)
# Load the gutenbergr package
library(gutenbergr)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses (English)")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
gutenberg_works()
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[2] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
state_of_union_text
books
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[2:10] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Load the gutenbergr package
library(gutenbergr)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses (1790-2000)")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[2] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
library(dplyr)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses (1790-2000)")
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses (1790-2000)")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[2] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Display the first few rows of the combined text
head(state_of_union_text)
book_id
books
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[2] # Take the first match
books
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Display the first few rows of the downloaded text
head(state_of_union_text)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Display the first few rows of the combined text
head(state_of_union_text)
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tm)
install.packages("tm")
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tm)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Remove stopwords and punctuation
clean_text <- state_of_union_text %>%
mutate(text = removeWords(text, stopwords("en")),
text = removePunctuation(text))
# Display the first few rows of the cleaned text
head(clean_text)
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
install.packages("tidytext")
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(tm)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Remove punctuation
state_of_union_text$text <- gsub("[[:punct:]]", "", state_of_union_text$text)
# Convert to a tidy format
tidy_text <- state_of_union_text %>%
unnest_tokens(word, text)
# Remove stopwords
data("stop_words")
tidy_text <- tidy_text %>%
anti_join(stop_words)
# Get word count
word_count <- tidy_text %>%
count(title, author, word, sort = TRUE)
# Display the first few rows of the word count
head(word_count)
# Display the first few rows of the word count
word_count
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(tm)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1:10] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Assuming the book is found, get the Gutenberg ID
book_id <- books$gutenberg_id[1:3] # Take the first match
# Download the book text using the Gutenberg ID
state_of_union_text <- gutenberg_download(book_id)
# Add title and author to the text
book_metadata <- books[books$gutenberg_id == book_id, c("title", "author")]
# Combine metadata and text
state_of_union_text <- state_of_union_text %>%
mutate(title = book_metadata$title, author = book_metadata$author)
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(tm)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the books are found, get the first 10 Gutenberg IDs
book_ids <- books$gutenberg_id[1:10] # Take the first 10 matches
# Download the book texts using the Gutenberg IDs
state_of_union_text <- gutenberg_download(book_ids)
# Add title and author to the text
state_of_union_text <- state_of_union_text %>%
left_join(books, by = "gutenberg_id") %>%
select(gutenberg_id, text, title, author)
# Remove punctuation
state_of_union_text$text <- gsub("[[:punct:]]", "", state_of_union_text$text)
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(stringi)
library(tm)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the books are found, get the first 10 Gutenberg IDs
book_ids <- books$gutenberg_id[1:10] # Take the first 10 matches
# Download the book texts using the Gutenberg IDs
state_of_union_text <- gutenberg_download(book_ids)
# Add title and author to the text
state_of_union_text <- state_of_union_text %>%
left_join(books, by = "gutenberg_id") %>%
select(gutenberg_id, text, title, author)
# Remove punctuation using stringi
state_of_union_text$text <- stri_replace_all_regex(state_of_union_text$text, "[[:punct:]]", "")
# Convert to a tidy format
tidy_text <- state_of_union_text %>%
unnest_tokens(word, text)
# Remove stopwords
data("stop_words")
tidy_text <- tidy_text %>%
anti_join(stop_words)
# Get word count
word_count <- tidy_text %>%
count(title, author, word, sort = TRUE)
# Display the first few rows of the word count
head(word_count)
# Display the first few rows of the word count
word_count
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(stringi)
library(tm)
library(wordcloud)
install.packages(c("wordcloud", "RColorBrewer", "wordcloud2"))
# Load the necessary packages
library(gutenbergr)
library(dplyr)
library(tidytext)
library(stringi)
library(tm)
library(wordcloud)
library(RColorBrewer)
# Search for the State of the Union Addresses
books <- gutenberg_works(title == "State of the Union Addresses")
# Display the information about the book(s) found
print(books)
# Assuming the books are found, get the first 10 Gutenberg IDs
book_ids <- books$gutenberg_id[1:10] # Take the first 10 matches
# Download the book texts using the Gutenberg IDs
state_of_union_text <- gutenberg_download(book_ids)
# Add title and author to the text
state_of_union_text <- state_of_union_text %>%
left_join(books, by = "gutenberg_id") %>%
select(gutenberg_id, text, title, author)
# Remove punctuation using stringi
state_of_union_text$text <- stri_replace_all_regex(state_of_union_text$text, "[[:punct:]]", "")
# Convert to a tidy format
tidy_text <- state_of_union_text %>%
unnest_tokens(word, text)
# Remove stopwords
data("stop_words")
tidy_text <- tidy_text %>%
anti_join(stop_words)
# Get word count
word_count <- tidy_text %>%
count(title, author, word, sort = TRUE)
# Create a palette of colors for authors
author_colors <- RColorBrewer::brewer.pal(length(unique(word_count$author)), "Set3")
names(author_colors) <- unique(word_count$author)
# Define a function to assign colors based on authors
assign_colors <- function(author) {
author_colors[author]
}
# Create a word cloud for each author
for (author in unique(word_count$author)) {
author_word_count <- word_count %>%
filter(author == !!author) %>%
with(wordcloud(word, n, scale = c(3, 0.5), colors = assign_colors(author), random.order = FALSE, max.words = 100))
title(main = paste("Word Cloud for", author), col.main = assign_colors(author))
}
shiny::runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
install.packages("stringi")
install.packages("RColorBrewer")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("tm")
install.packages("tidytext")
install.packages("janeaustenr")
install.packages("gutenbergr")
runApp()
install.packages("gutenbergr")
install.packages("janeaustenr")
install.packages("tidytext")
install.packages("tm")
install.packages("dplyr")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("stringi")
install.packages("stringi")
install.packages("RColorBrewer")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("tm")
install.packages("tidytext")
install.packages("janeaustenr")
install.packages("janeaustenr")
install.packages("tidytext")
install.packages("tm")
install.packages("dplyr")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("stringi")
install.packages("stringi")
install.packages("RColorBrewer")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("tm")
install.packages("tidytext")
install.packages("tidytext")
install.packages("tm")
install.packages("dplyr")
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("stringi")
install.packages("stringi")
install.packages("RColorBrewer")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("dplyr")
function (pkgs, lib, repos = getOption("repos"), contriburl = contrib.url(repos,
type), method, available = NULL, destdir = NULL, dependencies = NA,
type = getOption("pkgType"), configure.args = getOption("configure.args"),
configure.vars = getOption("configure.vars"), clean = FALSE,
Ncpus = getOption("Ncpus", 1L), verbose = getOption("verbose"),
libs_only = FALSE, INSTALL_opts, quiet = FALSE, keep_outputs = FALSE,
...)
shiny::runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
runApp('Git/robertnesterodhiambo-Data-analysis/R PROGRAMMING/Shiny wordcloud/Wordcloud')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
